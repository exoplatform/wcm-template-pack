<?xml version="1.0" encoding="UTF-8"?><bootstrap.js xmlns:nt="http://www.jcp.org/jcr/nt/1.0" xmlns:xcmis="http://www.exoplatform.com/jcr/xcmis/1.0" xmlns:tkn="http://www.gatein.org/jcr/token/1.0/" xmlns:webdav="http://www.exoplatform.org/jcr/webdav" xmlns:gtn="http://www.gatein.org/jcr/gatein/1.0/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:plf="http://www.exoplatform.org/jcr/plf/1.0/" xmlns:jcr="http://www.jcp.org/jcr/1.0" xmlns:wsrp="http://www.gatein.org/jcr/wsrp/1.0/" xmlns:sv="http://www.jcp.org/jcr/sv/1.0" xmlns:ntf="http://www.gatein.org/jcr/ntf/1.0/" xmlns:wiki="http://exoplatform.org/wiki/1.0/" xmlns:jos="http://www.exoplatform.com/jcr-services/organization-service/1.0/" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:metadata="http://www.exoplatform.com/jcr/metadata/1.1/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:app="http://www.gatein.org/jcr/application-registry/1.0/" xmlns:exoide="http://exoplatform.org/ide/1.1.x/" xmlns:stg="http://www.gatein.org/jcr/stg/1.0/" xmlns:cmis="http://www.exoplatform.com/jcr/cmis/1.0" xmlns:acme="http://www.exoplatform.com/plf/acme/4.0/" xmlns:lgn="http://www.gatein.org/jcr/autologin/1.0/" xmlns:mop="http://www.gatein.org/jcr/mop/1.0/" xmlns:fn_old="http://www.w3.org/2004/10/xpath-functions" xmlns:mix="http://www.jcp.org/jcr/mix/1.0" xmlns:publication="http://www.exoplatform.com/jcr/publication/1.1/" xmlns:exo="http://www.exoplatform.com/jcr/exo/1.0" xmlns:pc="http://www.gatein.org/jcr/pc/1.0/" xmlns:wai="http://www.exoplatform.com/ecm/accessibility/1.0" xmlns:soc="http://www.exoplatform.org/jcr/soc/1.0/" xmlns:portlet="http://www.gatein.org/jcr/portlet/1.0/" xmlns:rep="internal" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" jcr:primaryType="nt:file" jcr:mixinTypes="exo:sortable exo:owneable mix:referenceable exo:modify exo:jsFile exo:datetime mix:commentable mix:votable mix:i18n publication:authoring publication:authoringPublication mix:versionable exo:activityInfo" jcr:uuid="9f2fc2587f00000116ba325db9e86beb" exo:active="true" exo:activityId="9f2fc2a57f00000128f58bd21dd350f6" exo:dateCreated="2015-05-29T17:20:16.864+07:00" exo:dateModified="2015-05-29T17:20:16.925+07:00" exo:index="1000" exo:language="en" exo:lastModifiedDate="2015-05-29T17:20:17.292+07:00" exo:lastModifier="root" exo:name="bootstrap.js" exo:owner="root" exo:presentationType="exo:jsFile" exo:priority="0" exo:sharedJS="true" exo:title="bootstrap.js" exo:voteTotal="0" exo:voteTotalOfLang="0" exo:votingRate="0.0" publication:currentState="draft" publication:history="bootstrap.js;enrolled;root;2015-05-29T17:20:16.923+07:00;Publication.log.description.enrolled bootstrap.js;draft;root;2015-05-29T17:20:16.924+07:00;PublicationService.AuthoringPublicationPlugin.changeState.draft" publication:lastUser="root" publication:lifecycle="lifecycle1" publication:lifecycleName="Authoring_x0020_publication" publication:revisionData="9f2fc2587f00000116ba325db9e86beb,draft,root" jcr:baseVersion="9f2fc29a7f0000010fc531576d4c4ed3" jcr:created="2015-05-29T17:20:16.857+07:00" jcr:isCheckedOut="true" jcr:predecessors="9f2fc29a7f0000010fc531576d4c4ed3" jcr:versionHistory="9f2fc29a7f0000010446006accf486fd"><jcr:content jcr:primaryType="nt:resource" jcr:mixinTypes="exo:owneable exo:datetime dc:elementSet" jcr:uuid="9f2fc2867f0000015139fa6f17458a6f" exo:dateCreated="2015-05-29T17:20:16.903+07:00" exo:dateModified="2015-05-29T17:20:16.903+07:00" exo:internalUse="false" exo:owner="root" jcr:data="" jcr:lastModified="2015-05-29T17:20:16.917+07:00" jcr:mimeType="application/x-javascript"/></bootstrap.js>